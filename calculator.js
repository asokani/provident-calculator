// Generated by CoffeeScript 1.3.3
(function() {
  var Computation, NumberFormat,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  NumberFormat = (function() {

    function NumberFormat() {}

    NumberFormat.format = function(number, decimals, dec_point, thousands_sep) {
      var decimal, decimalPoint, negative;
      if (decimals == null) {
        decimals = 0;
      }
      if (dec_point == null) {
        dec_point = ',';
      }
      if (thousands_sep == null) {
        thousands_sep = ' ';
      }
      negative = number < 0 ? '-' : '';
      number = Math.abs(number);
      decimal = ((number - parseInt(number)).toFixed(decimals)).slice(2);
      number = ("" + (parseInt(number.toFixed(decimals)))).split('').reverse().join('').replace(/...(?!$)/g, "$&" + (thousands_sep.replace(/\$/g, '$$$$'))).split('').reverse().join('');
      decimalPoint = decimals !== 0 ? dec_point : '';
      return "" + negative + number + decimalPoint + decimal;
    };

    return NumberFormat;

  })();

  Computation = (function() {

    Computation.prototype.table = {};

    Computation.prototype.table_string = "issue_value	apr_45	interest_45	instalment_45	fee_45			apr_60	interest_60	instalment_60	fee_60\n4000	70,93	381	112	640			-	-	-	-\n5000	70,93	477	140	800			-	-	-	-\n6000	70,93	572	168	960			63,91	766	132	1140\n7000	70,93	668	196	1120			63,91	894	154	1330\n8000	70,93	763	224	1280			63,91	1021	176	1520\n9000	70,93	858	252	1440			63,91	1149	198	1710\n10000	70,93	954	279	1600			63,91	1277	220	1900\n11000	70,93	1049	307	1760			63,91	1405	242	2090\n12000	70,93	1144	335	1920			63,91	1532	264	2280\n13000	70,93	1240	363	2080			63,91	1660	286	2470\n14000	70,93	1335	391	2240			63,91	1788	308	2660\n15000	70,93	1430	419	2400			63,91	1915	330	2850\n16000	70,93	1526	447	2560			63,91	2043	352	3040\n17000	70,93	1621	475	2720			63,91	2171	374	3230\n18000	70,93	1716	503	2880			63,91	2298	396	3420\n19000	70,93	1812	531	3040			63,91	2426	418	3610\n20000	70,93	1907	558	3200			63,91	2554	440	3800\n21000	70,93	2003	586	3360			63,91	2681	462	3990\n22000	70,93	2098	614	3520			63,91	2809	484	4180\n23000	70,93	2193	642	3680			63,91	2937	506	4370\n24000	70,93	2289	670	3840			63,91	3064	528	4560\n25000	70,93	2384	698	4000			63,91	3192	550	4750\n26000	70,93	2479	726	4160			63,91	3320	571	4940\n27000	70,93	2575	754	4320			63,91	3448	593	5130\n28000	70,93	2670	782	4480			63,91	3575	615	5320\n29000	70,93	2765	809	4640			63,91	3703	637	5510\n30000	70,93	2861	837	4800			63,91	3831	659	5700\n31000	70,93	2956	865	4960			63,91	3958	681	5890\n32000	70,93	3051	893	5120			63,91	4086	703	6080\n33000	70,93	3147	921	5280			63,91	4214	725	6270\n34000	70,93	3242	949	5440			63,91	4341	747	6460\n35000	70,93	3338	977	5600			63,91	4469	769	6650\n36000	70,93	3433	1005	5760			63,91	4597	791	6840\n37000	70,93	3528	1033	5920			63,91	4724	813	7030\n38000	70,93	3624	1061	6080			63,91	4852	835	7220\n39000	70,93	3719	1088	6240			63,91	4980	857	7410\n40000	70,93	3814	1116	6400			63,91	5107	879	7600\n41000	-	-	-	-			63,91	5235	901	7790\n42000	-	-	-	-			63,91	5363	923	7980\n43000	-	-	-	-			63,91	5490	945	8170\n44000	-	-	-	-			63,91	5618	967	8360\n45000	-	-	-	-			63,91	5746	989	8550\n46000	-	-	-	-			63,91	5874	1011	8740\n47000	-	-	-	-			63,91	6001	1033	8930\n48000	-	-	-	-			63,91	6129	1055	9120\n49000	-	-	-	-			63,91	6257	1077	9310\n50000	-	-	-	-			63,91	6384	1099	9500";

    function Computation() {
      var columns, counter, row, week, _i, _j, _len, _len1, _ref, _ref1;
      counter = 0;
      _ref = this.table_string.split("\n");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        columns = row.replace(/^\s+|\s+$/g, "").split("\t");
        if (counter === 0) {
          this.header = columns;
        } else {
          this.table[this.get_value(columns, "issue_value")] = {};
          _ref1 = [45, 60];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            week = _ref1[_j];
            this.table[this.get_value(columns, "issue_value")][week] = {
              apr: this.get_value(columns, "apr_" + week),
              interest: this.get_value(columns, "interest_" + week),
              instalment: this.get_value(columns, "instalment_" + week),
              fee: this.get_value(columns, "fee_" + week)
            };
          }
        }
        counter++;
      }
    }

    Computation.prototype.get_value = function(columns, name) {
      var value;
      value = columns[$.inArray(name, this.header)].replace(",", ".");
      if (value !== "-") {
        return parseFloat(value);
      }
      return value;
    };

    Computation.prototype.get_allowed_weeks = function(issue_value) {
      var week, weeks, _i, _len, _ref;
      weeks = [];
      _ref = [45, 60];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        week = _ref[_i];
        if (this.table[issue_value][week]["apr"] !== "-") {
          weeks.push(week);
        }
      }
      return weeks;
    };

    Computation.prototype.compute = function(issue_value, pay_period) {
      return this.table[issue_value][pay_period];
    };

    return Computation;

  })();

  jQuery(function() {
    var Calculator;
    Calculator = (function() {

      Calculator.prototype.select_issue_value = $("select[name='issue-value']");

      Calculator.prototype.select_pay_period = $("select[name='pay-period']");

      Calculator.prototype.instalment = $("#instalment");

      Calculator.prototype.total = $("#total");

      Calculator.prototype.apr = $("#apr");

      Calculator.prototype.computation = new Computation();

      function Calculator() {
        this.recalculate = __bind(this.recalculate, this);

        this.redraw = __bind(this.redraw, this);
        this.select_issue_value.change(this.redraw);
        this.select_pay_period.change(this.recalculate);
        this.make_select_issue_value();
        this.make_select_pay_period();
        this.recalculate();
      }

      Calculator.prototype.make_select_issue_value = function() {
        var selected, value, _i, _results;
        _results = [];
        for (value = _i = 4000; _i <= 50000; value = _i += 1000) {
          selected = value === 25000 ? "selected='selected'" : '';
          _results.push(this.select_issue_value.append($("<option value=" + value + " " + selected + ">" + (NumberFormat.format(value)) + " Kč</option>")));
        }
        return _results;
      };

      Calculator.prototype.make_select_pay_period = function(weeks) {
        var value, _i, _len, _results;
        if (weeks == null) {
          weeks = [45, 60];
        }
        this.select_pay_period.empty();
        _results = [];
        for (_i = 0, _len = weeks.length; _i < _len; _i++) {
          value = weeks[_i];
          _results.push(this.select_pay_period.append($("<option value=" + value + ">" + value + " týdnů</option>")));
        }
        return _results;
      };

      Calculator.prototype.redraw = function() {
        var issue_value;
        issue_value = this.select_issue_value.val();
        this.make_select_pay_period(this.computation.get_allowed_weeks(issue_value));
        return this.recalculate();
      };

      Calculator.prototype.recalculate = function() {
        var issue, issue_value;
        issue_value = parseFloat(this.select_issue_value.val());
        issue = this.computation.compute(issue_value, this.select_pay_period.val());
        this.instalment.html(NumberFormat.format(issue.instalment) + " Kč");
        this.total.html(NumberFormat.format(issue_value + issue.interest + issue.fee) + " Kč");
        return this.apr.html(NumberFormat.format(issue.apr, 2) + " %");
      };

      return Calculator;

    })();
    return new Calculator();
  });

}).call(this);
